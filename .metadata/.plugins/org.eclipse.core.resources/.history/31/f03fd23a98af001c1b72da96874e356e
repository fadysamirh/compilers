package csen1002.main.task4;

import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Queue;
import java.util.Set;
import java.util.Stack;

/**
 * Write your info here
 * 
 * @name John Smith
 * @id 43-0234
 * @labNumber 07
 */
public class FDFA {
	/**
	 * FDFA constructor
	 * 
	 * @param description is the string describing a FDFA
	 */
	ArrayList<State> states;
	Set<Integer> acceptStates;
	Stack<State> stack;
	Queue<State> queue;
	Stack <Integer> inputString;

	public FDFA(String description) {
		// TODO Write Your Code Here
		states = new ArrayList<State>();
		stack = new Stack<State>();
		acceptStates = new HashSet<Integer>();
		inputString= new Stack<Integer>();
//		queue= new Queue<State>();
		// Split the string on '#'
		String[] splitedHashString = description.split("#");
		String[] splitSemiStatesString = splitedHashString[0].split(";");
		String[] splitedAcceptCommaString = splitedHashString[1].split(",");
		for(int i=0;i<splitSemiStatesString.length;i++)
			states.add(new State(0,0,0,""));


		for (int i = 0; i < splitSemiStatesString.length; i++) {
			String[] splitedCommaStatesString = splitSemiStatesString[i].split(",");
			states.set(Integer.parseInt(splitedCommaStatesString[0]),
					new State(Integer.parseInt(splitedCommaStatesString[0]),
							Integer.parseInt(splitedCommaStatesString[1]),
							Integer.parseInt(splitedCommaStatesString[2]), splitedCommaStatesString[3]));
		}

		for (int i = 0; i < splitedAcceptCommaString.length; i++) {
//			System.out.println(splitedAcceptCommaString[i]);
			acceptStates.add(Integer.parseInt(splitedAcceptCommaString[i]));
		}
	}

	/**
	 * Returns a string of actions.
	 * 
	 * @param input is the string to simulate by the FDFA.
	 * @return string of actions.
	 */
	public String run(String input) {
		// TODO Write Your Code Here
		State currentState = states.get(0);
		stack.push(currentState);
		inputString.push(-1);

		for (int i = 0; i < input.length(); i++) {
			int transition = Integer.parseInt("" + input.charAt(i));
			
			if (transition == 0) {
				stack.push(states.get(stack.peek().zeroTransition));
				inputString.push(0);
			} else {
				stack.push(states.get(stack.peek().oneTransition));
				inputString.push(1);


			}

		}
		
		Stack<State> temp = new Stack<State>();
		Stack <Integer> inputTemp=new Stack<Integer>();
		
		String output = "";
		while (!stack.isEmpty()) {

			while (!acceptStates.contains(stack.peek().state)) {
				temp.push(stack.pop());
				inputTemp.push(inputString.pop());
			}


			Stack<State> reverse = new Stack<State>();
			Stack<Integer>reverseInput= new Stack<Integer>();
			
			while (!stack.isEmpty()) {
				reverse.push(stack.pop());
				reverseInput.push(inputString.pop());
			}

			while (!reverse.isEmpty()) {
				State currentReverseState = reverse.pop();
				int currentNumber=reverseInput.pop();
				
				if (reverse.isEmpty()) {
					output += currentNumber + ", " + currentReverseState.stateString + ";";
				} else {
					if(currentNumber!=-1)
					{
						if(!output.equals("")) {
							if (output.charAt(output.length() - 1) == ';') {
								output += " " + currentNumber;
							} else {
								output += currentNumber;

							}
						}else {
							output += currentNumber;
						}
					}
				}

			}

			stack = temp;

		}

		return output;
	}

	public class State {
		int state;
		int zeroTransition;
		int oneTransition;
		String stateString;

		public State(int state, int zeroTransition, int oneTransition, String stateString) {
			this.state = state;
			this.zeroTransition = zeroTransition;
			this.oneTransition = oneTransition;
			this.stateString = stateString;
		}
	}
	public static void main(String[] args) {
		FDFA a= new FDFA("0,0,1,A;1,2,1,B;2,0,3,C;3,3,3,N#0,1,2");
		System.out.print(a.run("1011100"));
	}
}
